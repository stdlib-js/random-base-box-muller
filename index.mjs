// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-uint32array@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-mt19937@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-sqrt@esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-ln@esm/index.mjs";import c from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-sin@esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-cos@esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-float64-two-pi@esm/index.mjs";import b from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-float64-pi@esm/index.mjs";var v=u,y=j,x=c,w=f,N=g;var M=function(t){var e,s;return e=!0,function(){var n,i,r,o;if(e){do{n=t(),i=t()}while(0===n);return r=v(-2*y(n)),s=r*w(o=N*i),e=!1,r*x(o)}return e=!0,s}},L=u,E=j,O=f(b);var A=function(t){return L(-2*E(t))*O},I=u,T=j,q=f,P=g;var z=function(t){return I(-2*T(t))*q(P*t)},G=t,J=e,R=s,S=n,X=i,k=r.isPrimitive,U=o,V=d,B=m.factory,C=a,D=l,F=p,H=h,K=M,Q=A,W=z;var Y=function(t){var e,s,n,i;if(i={copy:!0},arguments.length){if(!S(t))throw new TypeError(H("invalid argument. Must provide an object. Value: `%s`.",t));if(U(t,"copy")&&(i.copy=t.copy,!k(t.copy)))throw new TypeError(H("invalid option. `%s` option must be a boolean. Option: `%s`.","copy",t.copy));if(U(t,"prng")){if(!X(t.prng))throw new TypeError(H("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",t.prng));e=t.prng}else if(U(t,"state")){if(i.state=t.state,!V(t.state))throw new TypeError(H("invalid option. `%s` option must be a Uint32Array. Option: `%s`.","state",t.state))}else if(U(t,"seed")&&(i.seed=t.seed,void 0===t.seed))throw new TypeError(H("invalid option. `%s` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `%s`.","seed",t.seed))}return void 0===i.state?void 0===e?e=(n=B(i)).normalized:i.seed=null:e=(n=B(i)).normalized,s=K(e),G(s,"NAME","box-muller"),null===i.seed?(G(s,"seed",null),G(s,"seedLength",null)):(J(s,"seed",r),J(s,"seedLength",o)),t&&t.prng?(R(s,"state",C(null),D),G(s,"stateLength",null),G(s,"byteLength",null),G(s,"toJSON",C(null))):(R(s,"state",a,l),J(s,"stateLength",d),J(s,"byteLength",m),G(s,"toJSON",p)),G(s,"PRNG",e),U(e,"MIN")?(G(s,"MIN",Q(e.MIN)),G(s,"MAX",W(e.MIN))):(G(s,"MIN",null),G(s,"MAX",null)),s;function r(){return n.seed}function o(){return n.seedLength}function d(){return n.stateLength}function m(){return n.byteLength}function a(){return n.state}function l(t){n.state=t}function p(){var t={type:"PRNG"};return t.name=s.NAME,t.state=F(n.state),t.params=[],t}},Z=Y(),$=Y;t(Z,"factory",$);var _=Z;export{_ as default,$ as factory};
//# sourceMappingURL=index.mjs.map
